// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Sitecore.Feature.Media.Specflow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MediaBackgroundFeature : Xunit.IClassFixture<MediaBackgroundFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Media Background.feature"
#line hidden
        
        public MediaBackgroundFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Media Background", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(MediaBackgroundFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Media Background")]
        [Xunit.TraitAttribute("Description", "Media Background_Parallax_UC1_Image background with paralax")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void MediaBackground_Parallax_UC1_ImageBackgroundWithParalax()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Media Background_Parallax_UC1_Image background with paralax", new string[] {
                        "NeedImplementation"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("Habitat website is opened on Main Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("Actor opens Parallax page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Class",
                        "data-multibackground-layer-0-url-mp4",
                        "data-multibackground-layer-0-attachment",
                        "data-multibackground-layer-0-parallaxspeed"});
            table1.AddRow(new string[] {
                        "parallax",
                        "/-/media/Habitat/Images/Square/Habitat-019-square.jpg",
                        "parallax",
                        "1.0"});
#line 9
 testRunner.Then("Following parallax control presents on page", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Media Background")]
        [Xunit.TraitAttribute("Description", "Media Background_Parallax_UC2_Image background without paralax")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void MediaBackground_Parallax_UC2_ImageBackgroundWithoutParalax()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Media Background_Parallax_UC2_Image background without paralax", new string[] {
                        "NeedImplementation"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("Habitat website is opened on Main Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.When("Actor opens Parallax page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Class",
                        "data-multibackground-layer-0-url-mp4",
                        "data-multibackground-layer-0-attachment"});
            table2.AddRow(new string[] {
                        "parallax",
                        "/-/media/Habitat/Images/Square/Habitat-019-square.jpg",
                        "static"});
#line 18
 testRunner.Then("Following parallax control presents on page", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Media Background")]
        [Xunit.TraitAttribute("Description", "Media Background_Parallax_UC3_Video background with paralax")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void MediaBackground_Parallax_UC3_VideoBackgroundWithParalax()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Media Background_Parallax_UC3_Video background with paralax", new string[] {
                        "NeedImplementation"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("Habitat website is opened on Main Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.When("Actor opens Parallax page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Class",
                        "data-multibackground-layer-0-url-mp4",
                        "data-multibackground-layer-0-attachment",
                        "data-multibackground-layer-0-parallaxspeed"});
            table3.AddRow(new string[] {
                        "parallax",
                        "/-/media/Habitat/Videos/Sitecore-Experience-Platform-on-Microsoft-Azure.mp4",
                        "parallax",
                        "1.0"});
#line 27
 testRunner.Then("Following parallax control presents on page", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Media Background")]
        [Xunit.TraitAttribute("Description", "Media Background_Parallax_UC4_Video background without paralax")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void MediaBackground_Parallax_UC4_VideoBackgroundWithoutParalax()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Media Background_Parallax_UC4_Video background without paralax", new string[] {
                        "NeedImplementation"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("Habitat website is opened on Main Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.When("Actor opens Parallax page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Class",
                        "data-multibackground-layer-0-url-mp4",
                        "data-multibackground-layer-0-attachment"});
            table4.AddRow(new string[] {
                        "parallax",
                        "/-/media/Habitat/Videos/Sitecore-Experience-Platform-on-Microsoft-Azure.mp4",
                        "static"});
#line 35
 testRunner.Then("Following parallax control presents on page", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Media Background")]
        [Xunit.TraitAttribute("Description", "Media Background_Parallax_UC5_Change from parallax to static")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void MediaBackground_Parallax_UC5_ChangeFromParallaxToStatic()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Media Background_Parallax_UC5_Change from parallax to static", new string[] {
                        "NeedImplementation"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemPath",
                        "FieldName",
                        "FieldValue"});
            table5.AddRow(new string[] {
                        "/sitecore/content/Habitat/Global/Media/Parallax/Parallax Picture",
                        "Is Parallax Enabled",
                        "0"});
#line 42
 testRunner.Given("Value set to item field", ((string)(null)), table5, "Given ");
#line 45
 testRunner.When("Actor opens Parallax page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Class",
                        "data-multibackground-layer-0-url-mp4",
                        "data-multibackground-layer-0-attachment"});
            table6.AddRow(new string[] {
                        "parallax",
                        "/-/media/Habitat/Images/Square/Habitat-019-square.jpg",
                        "static"});
#line 46
 testRunner.Then("Following parallax control presents on page", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Media Background")]
        [Xunit.TraitAttribute("Description", "Media Background_Parallax_UC6_Change from static to parallax")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void MediaBackground_Parallax_UC6_ChangeFromStaticToParallax()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Media Background_Parallax_UC6_Change from static to parallax", new string[] {
                        "NeedImplementation"});
#line 52
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemPath",
                        "FieldName",
                        "FieldValue"});
            table7.AddRow(new string[] {
                        "/sitecore/content/Habitat/Global/Media/Parallax/Static Background Picture",
                        "Is Parallax Enabled",
                        "1"});
#line 53
 testRunner.Given("Value set to item field", ((string)(null)), table7, "Given ");
#line 56
 testRunner.When("Actor opens Parallax page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Class",
                        "data-multibackground-layer-0-url-mp4",
                        "data-multibackground-layer-0-attachment",
                        "data-multibackground-layer-0-parallaxspeed"});
            table8.AddRow(new string[] {
                        "parallax",
                        "/-/media/Habitat/Images/Square/Habitat-019-square.jpg",
                        "static",
                        "1.0"});
#line 58
 testRunner.Then("Following parallax control presents on page", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Media Background")]
        [Xunit.TraitAttribute("Description", "Media Background_Parallax_UC6_Change parallax speed")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void MediaBackground_Parallax_UC6_ChangeParallaxSpeed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Media Background_Parallax_UC6_Change parallax speed", new string[] {
                        "NeedImplementation"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ItemPath",
                        "FieldName",
                        "FieldValue"});
            table9.AddRow(new string[] {
                        "/sitecore/content/Habitat/Global/Media/Parallax/Parallax Picture",
                        "Parallax Speed",
                        "1.5"});
#line 65
 testRunner.Given("Value set to item field", ((string)(null)), table9, "Given ");
#line 68
 testRunner.When("Actor opens Parallax page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Class",
                        "data-multibackground-layer-0-url-mp4",
                        "data-multibackground-layer-0-attachment",
                        "data-multibackground-layer-0-parallaxspeed"});
            table10.AddRow(new string[] {
                        "parallax",
                        "/-/media/Habitat/Images/Square/Habitat-019-square.jpg",
                        "static",
                        "1.5"});
#line 69
 testRunner.Then("Following parallax control presents on page", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Media Background")]
        [Xunit.TraitAttribute("Description", "Media Background_Parallax_UC8_Inverted parallax")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void MediaBackground_Parallax_UC8_InvertedParallax()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Media Background_Parallax_UC8_Inverted parallax", new string[] {
                        "NeedImplementation"});
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("Habitat website is opened on Main Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
 testRunner.When("Actor opens Parallax page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Class",
                        "data-multibackground-layer-0-url-mp4",
                        "data-multibackground-layer-0-attachment",
                        "data-multibackground-layer-0-parallaxspeed"});
            table11.AddRow(new string[] {
                        "parallax",
                        "/-/media/Habitat/Images/Square/Habitat-019-square.jpg",
                        "parallax",
                        "-1.0"});
#line 80
 testRunner.Then("Following parallax control presents on page", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Media Background")]
        [Xunit.TraitAttribute("Description", "Media Background_Parallax_UC9_Paralax template is available as Insert Options")]
        [Xunit.TraitAttribute("Category", "NeedImplementation")]
        public virtual void MediaBackground_Parallax_UC9_ParalaxTemplateIsAvailableAsInsertOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Media Background_Parallax_UC9_Paralax template is available as Insert Options", new string[] {
                        "NeedImplementation"});
#line 86
this.ScenarioSetup(scenarioInfo);
#line 87
 testRunner.Given("Actor has opened Habitat Content editor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 88
 testRunner.When("User selects /sitecore/content/Habitat/Global/Media/Parallax item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Insert option"});
            table12.AddRow(new string[] {
                        "Parallax"});
#line 89
 testRunner.Then("Following sub-items are available as Insert Options", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MediaBackgroundFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MediaBackgroundFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
